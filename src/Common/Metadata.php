<?php

namespace SandFoxMe\PhpStorm\Metadata\Common;

use SandFoxMe\PhpStorm\Metadata\Containers\ContainerIterator;

/**
 * Class Metadata
 * @package SandFoxMe\PhpStorm\Metadata\Common
 * @see https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Advanced+Metadata
 */
class Metadata
{
    /**
     * @var ContainerIterator[]
     */
    private $iterators;

    public function __construct(ContainerIterator ...$containerIterators)
    {
        $this->iterators = $containerIterators;
    }

    public function render(array $containerMethods): string
    {
        $map = ["'' => '@',"];

        $map = array_merge($map, ...array_map(function ($iterator) {
            return $this->createMap($iterator);
        }, $this->iterators));

        $mapStr = implode("\n        ", $map);

        $metadata = <<<PHP
<?php

// This file is automatically generated by \SandFoxMe\PhpStorm\Metadata\Common\MetadataWriter

namespace PHPSTORM_META {
PHP;

        foreach ($containerMethods as $method) {
            $metadata .= "\n    override({$method}, map([\n        {$mapStr}\n    ]));";
        }

        $metadata .= "\n}\n";

        return $metadata;
    }

    private function createMap(ContainerIterator $exportIterator): array
    {
        $map = [];

        foreach ($exportIterator as $key => $value) {
            if (is_object($value)) {
                $class = get_class($value);
                if (strpos($class, "\0") === false) {
                    $valueMap = "\\{$class}::class";
                } else { // handle anonymous class
                    $valueMap = 'object::class';
                }
            } elseif (is_array($value)) {
                $valueMap = "\\ArrayObject::class"; // array::class shows error, try to approximate
            } else {
                $valueMap = gettype($value) . '::class';
            }

            $map [] = "'{$key}' => $valueMap,";
        }

        return $map;
    }
}
